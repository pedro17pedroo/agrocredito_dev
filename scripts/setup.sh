#!/bin/bash

# ==============================================
# SCRIPT DE CONFIGURA√á√ÉO INICIAL - AGROCREDITO
# ==============================================

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se estamos na raiz do projeto
if [ ! -f "package.json" ]; then
    print_error "Este script deve ser executado na raiz do projeto AgroCr√©dito"
    exit 1
fi

print_info "Iniciando configura√ß√£o do AgroCr√©dito..."

# 1. Verificar depend√™ncias do sistema
print_info "Verificando depend√™ncias do sistema..."

# Verificar Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js n√£o est√° instalado. Instale Node.js 18+ antes de continuar."
    exit 1
fi

NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    print_error "Node.js vers√£o 18+ √© necess√°ria. Vers√£o atual: $(node -v)"
    exit 1
fi
print_success "Node.js $(node -v) encontrado"

# Verificar npm
if ! command -v npm &> /dev/null; then
    print_error "npm n√£o est√° instalado"
    exit 1
fi
print_success "npm $(npm -v) encontrado"

# 2. Configurar ficheiro .env
print_info "Configurando ficheiro de ambiente..."
if [ ! -f ".env" ]; then
    cp .env.example .env
    print_success "Ficheiro .env criado a partir do .env.example"
    print_warning "IMPORTANTE: Edite o ficheiro .env com as suas configura√ß√µes antes de continuar"
else
    print_warning "Ficheiro .env j√° existe. Verifique se est√° configurado corretamente."
fi

# 3. Instalar depend√™ncias
print_info "Instalando depend√™ncias do projeto..."
npm install
print_success "Depend√™ncias instaladas com sucesso"

# 4. Verificar MySQL
print_info "Verificando conex√£o com MySQL..."
if command -v mysql &> /dev/null; then
    print_success "MySQL encontrado"
    print_info "Certifique-se de que o MySQL est√° a correr e a base de dados est√° criada"
else
    print_warning "MySQL n√£o encontrado no PATH. Certifique-se de que est√° instalado e a correr"
fi

# 5. Criar diret√≥rios necess√°rios
print_info "Criando diret√≥rios necess√°rios..."
mkdir -p uploads logs
print_success "Diret√≥rios criados"

# 6. Verificar se Docker est√° dispon√≠vel
if command -v docker &> /dev/null; then
    print_success "Docker encontrado - $(docker --version)"
    if command -v docker-compose &> /dev/null; then
        print_success "Docker Compose encontrado - $(docker-compose --version)"
    else
        print_warning "Docker Compose n√£o encontrado. Instale para usar a configura√ß√£o Docker"
    fi
else
    print_warning "Docker n√£o encontrado. Instale Docker para usar a configura√ß√£o de containers"
fi

# 7. Instru√ß√µes finais
print_info "Configura√ß√£o inicial conclu√≠da!"
echo ""
print_info "Pr√≥ximos passos:"
echo "1. Edite o ficheiro .env com as suas configura√ß√µes"
echo "2. Configure a base de dados MySQL"
echo "3. Execute 'npm run db:push' para aplicar migra√ß√µes"
echo "4. Execute 'npm run seed' para inserir dados iniciais"
echo "5. Execute 'npm run dev' para iniciar o servidor de desenvolvimento"
echo ""
print_info "Para usar Docker:"
echo "1. Configure as vari√°veis no .env"
echo "2. Execute 'docker-compose up --build'"
echo ""
print_success "Setup conclu√≠do! Boa sorte com o desenvolvimento! üöÄ"