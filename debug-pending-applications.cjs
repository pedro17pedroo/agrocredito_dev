const mysql = require('mysql2/promise');
const dotenv = require('dotenv');

// Carregar vari√°veis de ambiente
dotenv.config();

async function debugPendingApplications() {
  console.log('üîç [DEBUG] === AN√ÅLISE DE APLICA√á√ïES PENDENTES ===');
  
  let connection;
  
  try {
    // Conectar √† base de dados MySQL
    console.log('üîó [DEBUG] Conectando √† base de dados MySQL...');
    connection = await mysql.createConnection(process.env.DATABASE_URL);
    console.log('‚úÖ [DEBUG] Conectado √† base de dados MySQL');
    
    // Consultar todas as aplica√ß√µes
    const [rows] = await connection.execute(`
      SELECT 
        id, 
        user_id, 
        project_name, 
        status, 
        amount, 
        created_at,
        updated_at
      FROM credit_applications 
      ORDER BY created_at DESC
    `);
    
    console.log('üìä [DEBUG] Total de aplica√ß√µes na BD:', rows.length);
    
    // Filtrar por status
    const pendingApps = rows.filter(app => app.status === 'pending');
    const underReviewApps = rows.filter(app => app.status === 'under_review');
    const approvedApps = rows.filter(app => app.status === 'approved');
    const rejectedApps = rows.filter(app => app.status === 'rejected');
    
    console.log('üìä [DEBUG] Contadores por status:');
    console.log('  - Pendentes:', pendingApps.length);
    console.log('  - Em an√°lise:', underReviewApps.length);
    console.log('  - Aprovadas:', approvedApps.length);
    console.log('  - Rejeitadas:', rejectedApps.length);
    
    // Mostrar detalhes das aplica√ß√µes pendentes
    console.log('\nüîç [DEBUG] Aplica√ß√µes pendentes detalhadas:');
    pendingApps.forEach((app, index) => {
      console.log(`  ${index + 1}. ID: ${app.id}`);
      console.log(`     Status: ${app.status}`);
      console.log(`     Projeto: ${app.project_name}`);
      console.log(`     Usu√°rio: ${app.user_id}`);
      console.log(`     Criado em: ${app.created_at}`);
      console.log(`     Montante: ${app.amount}`);
      console.log('     ---');
    });
    
    // Verificar aplica√ß√µes por usu√°rio
    const userGroups = {};
    rows.forEach(app => {
      if (!userGroups[app.user_id]) {
        userGroups[app.user_id] = [];
      }
      userGroups[app.user_id].push(app);
    });
    
    console.log('\nüë• [DEBUG] Aplica√ß√µes por usu√°rio:');
    Object.entries(userGroups).forEach(([userId, apps]) => {
      const pending = apps.filter(app => app.status === 'pending').length;
      console.log(`  Usu√°rio ${userId}: ${apps.length} total, ${pending} pendentes`);
    });
    
    // Verificar datas das aplica√ß√µes pendentes
    console.log('\nüìÖ [DEBUG] An√°lise de datas das aplica√ß√µes pendentes:');
    const now = new Date();
    const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
    
    pendingApps.forEach(app => {
      const createdAt = new Date(app.created_at);
      const isRecent = createdAt > oneMonthAgo;
      console.log(`  ID ${app.id}: ${createdAt.toISOString()} (${isRecent ? '√∫ltimo m√™s' : 'mais antigo'})`);
    });
    
    // Verificar se h√° filtros espec√≠ficos para relat√≥rios de clientes
    console.log('\nüîç [DEBUG] Verificando aplica√ß√µes do √∫ltimo m√™s (filtro de relat√≥rios):');
    const recentPendingApps = pendingApps.filter(app => {
      const createdAt = new Date(app.created_at);
      return createdAt > oneMonthAgo;
    });
    
    console.log(`  - Pendentes no √∫ltimo m√™s: ${recentPendingApps.length}`);
    console.log(`  - Pendentes totais: ${pendingApps.length}`);
    
    if (recentPendingApps.length !== pendingApps.length) {
      console.log('\n‚ö†Ô∏è [DEBUG] DISCREP√ÇNCIA ENCONTRADA!');
      console.log('  Os relat√≥rios podem estar filtrando por data!');
      console.log('  Cards mostram aplica√ß√µes do √∫ltimo m√™s apenas.');
    }
    
  } catch (error) {
    console.error('‚ùå [DEBUG] Erro ao analisar aplica√ß√µes:', error);
  } finally {
    if (connection) {
      await connection.end();
      console.log('\n‚úÖ [DEBUG] Conex√£o fechada');
    }
  }
}

// Executar o debug
debugPendingApplications().then(() => {
  console.log('\n‚úÖ [DEBUG] An√°lise conclu√≠da');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå [DEBUG] Erro fatal:', error);
  process.exit(1);
});